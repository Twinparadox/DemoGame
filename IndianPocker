#include <iostream>
#include <string>
#include <cstdlib>
#include <ctime>
#include <Windows.h>

using namespace std;

#define MINBET 10

/* Card Class */
/* has card number */
/* Getting Function only */
class Card
{
protected:
	int card; // 1~10

public:
	Card()
	{
		this->card = 1 + rand() % 10;
	}
	int GetCard()
	{
		return this->card;
	}
	~Card() {}
};


/* Point Class */
/* has betpoint and ownpoint*/
class Point
{
protected:
	int now;
	int bet;

public:
	/* Initialize */
	Point()
	{
		this->now = 100;
		this->bet = 0;
	}

	/* Set and Get Bet */
	/* Clear Function */
	void SetBet(int bet)
	{
		this->bet += bet;
	}
	void ClearBet()
	{
		this->bet = 0;
	}
	int GetBet()
	{
		return this->bet;
	}

	/* Set and Get Point */
	void SetPoint(int n)
	{
		this->now += n;
	}
	int GetPoint()
	{
		return this->now;
	}
	
	~Point() {}
};


/* User Class */
/* Succeed Card and Point Class */
/* has User's ID only */
class Person : public Card, public Point
{
protected:
	string Name;

public:
	/* Set and Get Name Function */
	void SetName(string n)
	{
		this->Name = n;
	}
	string GetName()
	{
		return this->Name;
	}
};


/* Computer Class*/
/* Succeed Card and Point Class */
class Com : public Card, public Point
{
public:

};

/* Main Function */
int main(void)
{
	srand((unsigned)time(NULL));

	Person player;
	Sleep(1); // Delay 1ms, Becaus of random func
	Com computer;

	int race; // race (MAX 3)
	char yn; // Yes or No
	string name; // User ID
	int betmoney; // Betting Money
	int betbefore; // Before Betting Money

	/* User ID Setting */
	cout << "User ID : ";
	cin >> name;
	player.SetName(name);

	/* Initialize */
	/* Need Init Module */
	race = 1;
	betbefore = 0;

	while (race <= 3)
	{
		/* Minimum Betting */
		player.SetBet(MINBET);
		player.SetPoint(-player.GetBet());
		computer.SetBet(MINBET);
		computer.SetPoint(-computer.GetBet());

		/* View User's Card and Com's */
		/* Modulization */
		cout << "User's Betting : " << player.GetBet() << endl;
		cout << "Computer's Betting : " << computer.GetBet() << endl;
		cout << "Computer's Card : " << computer.
			GetCard() << endl;
		cout << "배팅하시겠습니까 ? ( Y / N ) : ";
		cin >> yn;

		/* if give up, Calculate point and Finish the race */
		if (yn == 'N' || yn == 'n')
		{
			/* if user's card number is bigger than com's */
			/* penalty */
			if (player.GetCard() > computer.GetCard())
			{
				player.SetPoint(-player.GetBet());
				player.SetBet(player.GetBet());
			}

			computer.SetPoint(computer.GetBet() + player.GetBet());
			player.ClearBet();
			computer.ClearBet();
			break;
		}

		/* If continue */
		else
		{
			cout << "얼마나 배팅하시겠습니까? > ";
			cin >> betmoney;
			player.SetBet(betmoney);
			player.SetPoint(-betmoney);
		}
		race++;
	}


	/* Test Part */
	cout << player.GetCard() << endl;
	cout << computer.GetCard() << endl;
	cout << "User ID : " << player.GetName() << endl;
	cout << player.GetPoint() << endl;
	cout << computer.GetPoint() << endl;
}
